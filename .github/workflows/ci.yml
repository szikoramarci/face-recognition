name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  docker_image_name: szikoramarci/face-recognition

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest    
    strategy:
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Lint with flake8
      run: flake8 src

    - name: Run tests with pytest
      run: pytest

  versioning:
    needs: test
    outputs:
      version: ${{ steps.generated-version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Bump version and push tag
      uses: anothrNick/github-tag-action@1.36.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        DEFAULT_BUMP: patch
        RELEASE_BRANCHES: main
        CUSTOM_TAG_PREFIX: ""
        WITH_V: true

    - name: Generate new version
      id: generated-version
      run: echo "{version}={$(git describe --tags $(git rev-list --tags --max-count=1))}" >> GITHUB_OUTPUT

    - name: Output new version
      run: echo "New version is ${{ steps.generated-version.outputs.version }}"

  build-and-push:
    needs: versioning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Build Docker image
      run: docker build -t ${{ env.docker_image_name }}:${{ needs.versioning.outputs.version }} .
      shell: bash

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    
    - name: Push Docker image
      run: docker push ${{ env.docker_image_name }}:${{ needs.versioning.outputs.version }}
        
  security-scan:
    needs: [build-and-push, versioning]
    runs-on: ubuntu-latest
    steps: 
    - name: Checkout repository
      uses: actions/checkout@v2    

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
    - name: Pull Docker image
      run: docker pull ${{ env.docker_image_name }}:${{ needs.versioning.outputs.version }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.20.0
      with:
        image-ref: '${{ env.docker_image_name }}:${{ needs.versioning.outputs.version }}'
        scan-type: image
        format: 'github'
        output: 'dependency-results.sbom.json'
        vuln-type: 'os,library'
        severity: 'CRITICAL,HIGH'
        github-pat: ${{ secrets.GITHUB_TOKEN }}     

    - name: Upload trivy report as a Github artifact
      uses: actions/upload-artifact@v4
      with:
        name: trivy-sbom-report
        path: '${{ github.workspace }}/dependency-results.sbom.json'
        retention-days: 20

  